"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/3nf3Hoi26BU
 */
import { Button } from "@/components/ui/button"
import { useRef, useState, useEffect } from "react"; // Import useRef hook
import styled, { keyframes } from 'styled-components';

export default function ClassSearch() {
  // Sample data for Sources
  const [sources, setSources] = useState([
    { name: "Lecture 1", id: 1 },
    { name: "Lecture 2", id: 2 },
    { name: "Lecture 4", id: 3 },
  ]);

  // Sample data for Related
  const [related, setRelated] = useState([
    { query: "what is a short answer" },
    { query: "how to create a short answer" },
    { query: "why short answers are effective" },
  ]);

  const [textareaValue, setTextareaValue] = useState('');
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [inputStyle, setInputStyle] = useState('rounded-full bg-black-500');
  const [enterPressed, setEnterPressed] = useState(false);
  const [reSearch, setReSearch] = useState(false)
  const [titleText, setTitleText] = useState("Give me a short answer to this"); // Added state for dynamic title text

  const handleInput = (e: React.FormEvent<HTMLTextAreaElement>) => {
    const target = e.currentTarget;
    target.style.height = 'auto';
    target.style.height = `${target.scrollHeight}px`;
    setInputStyle(target.scrollHeight > 35 ? 'rounded-md bg-black-500' : 'rounded-full bg-black-500');
  };
  const handleKeyPress = async (e?: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e?.key === 'Enter' && !e.shiftKey || reSearch === true) {
      console.log(reSearch)
      e?.preventDefault();
      // Clear UI by resetting states that control the display of content
      setTypedAnswer(""); // Clear the typed answer
      setSources([]); // Clear sources
      setRelated([]); // Clear related questions
      setTitleText(""); // Clear title text
      setEnterPressed(false); // Reset enterPressed to hide content sections
  
      if (textareaRef.current && textareaRef.current.value.trim() !== '') {
        console.log("should generate related questions")
       
        // Update the UI with new content after clearing
        setEnterPressed(true); // Show content sections
        setTitleText(textareaRef.current.value); // Set the new title text
        const newRelatedQuestions = await generateRelatedQuestions(textareaRef.current.value);
        const answerText = await generateAnswer(textareaRef.current.value);
        setRelated(newRelatedQuestions.map((query, index) => ({ query, id: index })));
        setSources([
          { name: "Lecture 1", id: 4 },
          { name: "Lecture 2", id: 5 },
          { name: "Lecture 3", id: 6 },
        ]);
        setTypedAnswer(""); // Prepare to set the generated answer text
        setTextareaValue(''); // Clear the textarea value
        setFullAnswerText(answerText); // Set the fullAnswerText to the generated answer
      }
    }
  };

  const [typedAnswer, setTypedAnswer] = useState(""); // State to hold the currently typed text
  const [fullAnswerText, setFullAnswerText] = useState(""); // State to hold the full answer text

  useEffect(() => {
    let index = 0;
    const intervalId = setInterval(() => {
      if (index <= fullAnswerText.length) {
        setTypedAnswer((prev) => prev + fullAnswerText.charAt(index));
        index++;
      } else {
        clearInterval(intervalId);
      }
    }, 12.5); // Adjust the interval (12.5ms) to control the speed of typing, speeding up by 4x

    return () => clearInterval(intervalId); // Cleanup interval on component unmount
  }, [fullAnswerText]);

  return (
    <div className="max-w-2xl mx-auto my-8">

       <h1 className="text-4xl font-bold text-center text-orange-500">Ta.ai</h1>
       {enterPressed && (
      <div>
       <h1 className="text-4xl font-bold mb-6">{titleText}</h1> {/* Use dynamic title text */}
        <div className="mb-6">
          <h2 className="text-2xl font-semibold mb-3 flex items-center">
            <SourcesIcon className="mr-2" />Sources
          </h2>
          <div className="flex flex-wrap gap-4">
            {sources.map((source, index) => (
              <div key={index} className="flex items-center space-x-2">
                <FileIcon className="text-gray-600 fadeInTopToBottom"  />
                <span className="text-sm fadeInTopToBottom">{source.name}</span>
                <span className="text-xs text-gray-500 fadeInTopToBottom">. {source.id}</span>
              </div>
            ))}
          </div>
        </div>
        <div className="mb-6 fadeInTopToBottom" style={{'--animation-delay': '1.5s'}}>
          <h2 className="text-2xl font-semibold mb-3 flex items-center">
            <AnswerIcon className="mr-2" />Answer
          </h2>
          <p className="mb-4">
            {typedAnswer}
          </p>
          <div className="flex items-center space-x-2">
            <ShareIcon className="text-gray-600 cursor-pointer" onClick={() => navigator.clipboard.writeText(typedAnswer)} />
            <Button className="text-sm pl-1" variant="ghost" onClick={() => navigator.clipboard.writeText(typedAnswer)}>
              Share
            </Button>
            <WriteIcon className="text-gray-600" />
            <Button className="text-sm pl-1" variant="ghost" onClick={() => {
              setReSearch(true);
              handleKeyPress();
            }}>
              Rewrite
            </Button>
            {/* <CircleEllipsisIcon className="text-gray-600" /> */}
          </div>
        </div>
        <div className="fadeInTopToBottom" style={{'--animation-delay': '2s'}}>
          <h2 className="text-2xl font-semibold mb-3 flex items-center">
            <RelatedIcon className="mr-2" />Related
          </h2>
          <div className="space-y-2">
            {related.map((item, index) => (
              <div key={index} className="flex justify-between items-center">
                <span className="text-sm fadeInTopToBottom">{item.query}</span>
                <SearchIcon className="text-gray-600 cursor-pointer" onClick={() => {
                  setTextareaValue(item.query);
                  setEnterPressed(true);
                 
                    textareaRef.current.value = item.query; // Set the textarea value to the selected query
                    const event = new KeyboardEvent('keypress', {'key': 'Enter'});
                    document.dispatchEvent(event); // Simulate Enter key pressT
                }} />
              </div>
            ))}
          </div>
        </div>
        </div>
     )}
      
      <div className="fixed bottom-20 inset-x-0 px-4">
        <div className="flex justify-center items-center relative">
          <div className={`w-full max-w-2xl ${inputStyle} border-2 border-white flex items-center relative bg-black`}>
            <SearchIcon className="ml-3" />
            <textarea
              ref={textareaRef}
              placeholder="Ask anything about the course material"
              className={`w-full bg-black py-4 pl-4 pr-10 text-left text-lg focus:outline-none resize-none ${inputStyle}`}
              rows="1"
              onInput={handleInput}
              onKeyPress={handleKeyPress}
              value={textareaValue} // Controlled component
              onChange={(e) => setTextareaValue(e.target.value)} // Update state on change
            ></textarea>
          
            {/* <EnterIcon
            setReSearch={setReSearch}
            handleKeyPress={handleKeyPress} /> */}
          </div>
        </div>
      </div>
    </div>
  )
}

function FileIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
      <polyline points="14 2 14 8 20 8" />
    </svg>
  )
}

function CircleEllipsisIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="M17 12h.01" />
      <path d="M12 12h.01" />
      <path d="M7 12h.01" />
    </svg>
  )
}

async function generateRelatedQuestions(prompt) {
  console.log("Entering generateRelatedQuestions");
  const apiKey = "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"; // Replace with your actual API key

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: `Generate 3 related questions for the topic "${prompt}".` },
          { role: "user", content: "Here are 3 related questions:" } // Prompt for the model to generate questions
        ],
        temperature: 0.7,
        max_tokens: 100,
        top_p: 1.0,
        frequency_penalty: 0.0,
        presence_penalty: 0.0
      }),
    });

    const data = await response.json();
    const questions = data.choices[0].message.content.trim().split('\n').filter(line => line !== '');
    console.log(questions);
    return questions;
  } catch (error) {
    console.error('Error generating related questions:', error);
    return []; // Return an empty array or handle error as needed
  }
}

async function generateAnswer(prompt) {
  console.log("Entering generateAnswer");
  try {
    const response = await fetch("https://1c88c5b2627b.ngrok.app/query", {
      method: "POST",
      headers: {
        "Content-Type": "application/json", // Ensure the server knows you're sending JSON
      },
      body: JSON.stringify({
        collection_id: "jklfd", // Ensure this is the correct collection ID
        query: prompt
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log(data);
    return data;
  } catch (error) {
    console.error('Error generating answer:', error);
    return ""; // Consider handling this more gracefully
  }
}


function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}

function SourcesIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="2" y="3" width="20" height="14" rx="2" ry="2" />
      <line x1="2" y1="10" x2="22" y2="10" />
      <line x1="6" y1="7" x2="6" y2="7" />
      <line x1="10" y1="7" x2="10" y2="7" />
    </svg>
  );
}

function AnswerIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 11.5a8.38 8.38 0 0 1-8.5 8.5H5l-2 2 2-2a8.38 8.38 0 0 1-1.5-8.5A8.38 8.38 0 0 1 12.5 3 8.38 8.38 0 0 1 21 11.5z"></path>
      <polyline points="9 12 11 14 15 10"></polyline>
    </svg>
  );
}


function RelatedIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M7 17l-5-5 5-5" />
      <path d="M21 12H3" />
      <path d="M17 7l5 5-5 5" />
    </svg>
  );
}

function ShareIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="18" cy="5" r="3"></circle>
      <circle cx="6" cy="12" r="3"></circle>
      <circle cx="18" cy="19" r="3"></circle>
      <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
      <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
    </svg>
  );
}

function WriteIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12, 19H5a2, 2 0 0 1-2-2V5a2, 2 0 0 1 2-2h14a2, 2 0 0 1 2,2v7" />
      <path d="M18,13.5A2.5,2.5 0 1 1 15.5,16 A2.5,2.5 0 0 1 18,13.5z" />
      <path d="M18,13.5L21,21l-7.5-3z" />
    </svg>
  );
}
// EnterKeyPromptIcon: A visual cue prompting users to press the Enter key.
function EnterIcon({ triggerSearch, onKeyPress }) {

  // When clicked, initiates search and triggers key press actions.
  return (
    <div 
      onClick={() => { 
        triggerSearch(true); // Initiates the search process.
        onKeyPress(); // Handles additional key press actions.
      }} 
      className="cursor-pointer absolute right-3" // Positioned absolutely to the right, with a pointer cursor for click indication.
      title="Press Enter to search" // Adds a tooltip for extra guidance.
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="48" // Increased size for better visibility.
        height="48" // Matched width for a uniform size increase.
        viewBox="0 0 24 24"
        fill="none"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <circle cx="12" cy="12" r="10" stroke="#FFA500" strokeWidth="2" /> {/* Outer circle with a stroke to define the Enter key symbol boundary */}
        <path d="M12 8v8" stroke="#FFA500" strokeWidth="2"/> {/* Vertical line representing the Enter key's return stroke */}
        <path d="M8 12l4-4 4 4" stroke="#FFA500" strokeWidth="2"/> {/* Arrow, pointing towards the Enter functionality */}
      </svg>
    </div>
  );
}


