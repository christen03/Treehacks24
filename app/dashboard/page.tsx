"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/mw0ZX5yE2dS
 */
import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  Card,
} from "@/components/ui/card";
import { api } from "@/convex/_generated/api";
import { useUser } from "@auth0/nextjs-auth0/client";
import { ResponsiveLine } from "@nivo/line";
import { useQuery } from "convex/react";

export default function Page() {
  return (
    <div className="flex flex-col gap-4 w-full">
      <Card>
        <CardHeader className="pb-0 text-center">
          <CardTitle className="text-3xl">
            Question answering over time
          </CardTitle>
          <CardDescription className="text-xl">
            Percentage of questions answered correctly over time
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4">
            <LineChart className="w-full aspect-[2/1]" />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function LineChart(props: React.HTMLAttributes<HTMLDivElement>) {
  const { user } = useUser();

  const getClass = useQuery(api.classes.get, { userId: user?.email });
  const lectureIds =
    getClass?.map((currentClass, index) => {
      const lectureId = currentClass.lectureId;
      return lectureId;
    }) ?? [];

  const data = useQuery(api.studentResponses.getAverageScore, {
    lectureIds: lectureIds,
  });

  return (
    <div {...props}>
      {data && (
        <ResponsiveLine
          data={[
            {
              id: "Sample Data",
              data: data,
              // data: [
              //   { x: 1, y: 5 },
              //   { x: 2, y: 10 },
              //   { x: 3, y: 15 },
              //   { x: 4, y: 20 },
              //   { x: 5, y: 25 },
              //   { x: 6, y: 30 },
              //   { x: 7, y: 35 },
              //   { x: 8, y: 40 },
              //   { x: 9, y: 15 },
              //   { x: 10, y: 50 },
              //   { x: 11, y: 55 },
              //   { x: 12, y: 60 },
              //   { x: 13, y: 25 },
              //   { x: 14, y: 70 },
              //   { x: 15, y: 75 },
              //   { x: 16, y: 40 },
              //   { x: 17, y: 85 },
              //   { x: 18, y: 90 },
              //   { x: 19, y: 95 },
              // ],
            },
          ]}
          margin={{ top: 10, right: 10, bottom: 80, left: 80 }}
          xScale={{
            type: "linear",
            min: 0,
            max: 20,
          }}
          yScale={{
            type: "linear",
            min: 0,
            max: 100,
          }}
          axisTop={null}
          axisRight={null}
          axisBottom={{
            tickSize: 5,
            tickPadding: 16,
            tickValues: 5,
            legend: "Lecture",
            legendOffset: 70,
            legendPosition: "middle",
          }}
          axisLeft={{
            tickSize: 5,
            tickValues: [0, 25, 50, 75, 100],
            tickPadding: 16,
            legend: "% Correct",
            legendOffset: -70,
            legendPosition: "middle",
          }}
          colors={["#90ee90"]}
          pointSize={10} // Increased size of each data point
          lineWidth={4}
          useMesh={true}
          enableGridX={false}
          enableGridY={true}
          gridYValues={[0, 25, 50, 75, 100]}
          gridXValues={[0, 5, 10, 15, 20]}
          theme={{
            grid: {
              line: {
                stroke: "#e0e0e0", // Lighter gray for grid background
                strokeWidth: 1,
              },
            },
            axis: {
              ticks: {
                line: {
                  stroke: "#e0e0e0", // Adjusted to match grid for consistency
                  strokeWidth: 2,
                },
                text: {
                  fill: "#e0e0e0", // Adjusted to match grid for consistency
                  fontSize: 16, // Larger font size for ticks
                },
              },
              legend: {
                text: {
                  fill: "#e0e0e0", // Adjusted to match grid for consistency
                  fontSize: 18, // Larger font size for axis titles
                  fontWeight: "bold",
                },
              },
            },
            tooltip: {
              chip: {
                borderRadius: "9999px",
              },
              container: {
                fontSize: "12px",
                textTransform: "capitalize",
                borderRadius: "6px",
                background: "#fff", // Ensuring tooltip background is solid for readability
                boxShadow: "0px 3px 6px rgba(0, 0, 0, 0.1)", // Adding subtle shadow for better visibility
                color: "#333", // Changing text color for better contrast
              },
            },
          }}
          enablePointLabel={false} // Disabling point labels by default
          pointLabel="y" // Specifying the label to display (y value)
          pointLabelYOffset={-12} // Adjusting label position for better visibility
          role="application"
        />
      )}
    </div>
  );
}
